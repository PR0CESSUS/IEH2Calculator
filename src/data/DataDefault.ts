import { Enums } from "@/Enums";
import { ChallengeMonsterKind } from "../type/ChallengeMonsterKind";
import { MonsterColor } from "../type/MonsterColor";
import { MonsterSpecies } from "../type/MonsterSpecies";

export class DataDefault {
  // custom
  isSuperDungeon: boolean = false;
  isBlessing: boolean = false;
  superDungeonPowerupLevels: number[] = Array(21).fill(0);
  superDungeonPowerupIsActive: boolean = false;
  enemyLevel: number = 1;
  enemyColor: MonsterColor = 0;
  enemySpecies: MonsterSpecies = 0;
  enemyChallenge: ChallengeMonsterKind = 0;
  sdModifierValuesCustom: number[] = Array(Enums.SDModifierKind).fill(0);
  isActiveSdModifiersCustom: boolean[] = Array(Enums.SDModifierKind).fill(false);
  // isActiveSdModifiers is used to store modifier data it starts at index 950 + SDModifierKind
  // sdModifierValues is used to store modifier data it starts at index 950 + SDModifierKind
  // custom end
  ascendTime?: number; // = 0;
  currentAreaKind: number[] = Array(6).fill(0);
  currentAreaId: number[] = Array(6).fill(0);
  isActiveBattle: boolean[] = Array(6).fill(false);
  blessingDurationLefts?: number[]; // = Array(80).fill(0);
  monsterDefeatedNumsSlime: number[] = Array(60).fill(0);
  monsterDefeatedNumsMagicSlime: number[] = Array(60).fill(0);
  monsterDefeatedNumsSpider: number[] = Array(60).fill(0);
  monsterDefeatedNumsBat: number[] = Array(60).fill(0);
  monsterDefeatedNumsFairy: number[] = Array(60).fill(0);
  monsterDefeatedNumsFox: number[] = Array(60).fill(0);
  monsterDefeatedNumsDevilFish: number[] = Array(60).fill(0);
  monsterDefeatedNumsTreant: number[] = Array(60).fill(0);
  monsterDefeatedNumsFlameTiger: number[] = Array(60).fill(0);
  monsterDefeatedNumsUnicorn: number[] = Array(60).fill(0);
  monsterDefeatedNumsMimic: number[] = Array(60).fill(0);
  monsterDefeatedNumsChallenge: number[] = Array(100).fill(0);
  monsterCapturedNumsSlime: number[] = Array(60).fill(0);
  monsterCapturedNumsMagicSlime: number[] = Array(60).fill(0);
  monsterCapturedNumsSpider: number[] = Array(60).fill(0);
  monsterCapturedNumsBat: number[] = Array(60).fill(0);
  monsterCapturedNumsFairy: number[] = Array(60).fill(0);
  monsterCapturedNumsFox: number[] = Array(60).fill(0);
  monsterCapturedNumsDevilFish: number[] = Array(60).fill(0);
  monsterCapturedNumsTreant: number[] = Array(60).fill(0);
  monsterCapturedNumsFlameTiger: number[] = Array(60).fill(0);
  monsterCapturedNumsUnicorn: number[] = Array(60).fill(0);
  monsterCapturedNumsMimic: number[] = Array(60).fill(0);
  monsterCapturedNumsChallenge: number[] = Array(100).fill(0);
  monsterMutantDefeatedNumsSlime: number[] = Array(60).fill(0);
  monsterMutantDefeatedNumsMagicSlime: number[] = Array(60).fill(0);
  monsterMutantDefeatedNumsSpider: number[] = Array(60).fill(0);
  monsterMutantDefeatedNumsBat: number[] = Array(60).fill(0);
  monsterMutantDefeatedNumsFairy: number[] = Array(60).fill(0);
  monsterMutantDefeatedNumsFox: number[] = Array(60).fill(0);
  monsterMutantDefeatedNumsDevilFish: number[] = Array(60).fill(0);
  monsterMutantDefeatedNumsTreant: number[] = Array(60).fill(0);
  monsterMutantDefeatedNumsFlameTiger: number[] = Array(60).fill(0);
  monsterMutantDefeatedNumsUnicorn: number[] = Array(60).fill(0);
  monsterMutantDefeatedNumsMimic: number[] = Array(60).fill(0);
  monsterMutantDefeatedNumsChallenge: number[] = Array(100).fill(0);
  monsterMutantCapturedNumsSlime: number[] = Array(60).fill(0);
  monsterMutantCapturedNumsMagicSlime: number[] = Array(60).fill(0);
  monsterMutantCapturedNumsSpider: number[] = Array(60).fill(0);
  monsterMutantCapturedNumsBat: number[] = Array(60).fill(0);
  monsterMutantCapturedNumsFairy: number[] = Array(60).fill(0);
  monsterMutantCapturedNumsFox: number[] = Array(60).fill(0);
  monsterMutantCapturedNumsDevilFish: number[] = Array(60).fill(0);
  monsterMutantCapturedNumsTreant: number[] = Array(60).fill(0);
  monsterMutantCapturedNumsFlameTiger: number[] = Array(60).fill(0);
  monsterMutantCapturedNumsUnicorn: number[] = Array(60).fill(0);
  monsterMutantCapturedNumsMimic: number[] = Array(60).fill(0);
  monsterMutantCapturedNumsChallenge: number[] = Array(100).fill(0);
  summonSpecies?: number[]; // = Array(60).fill(0);
  summonColor?: number[]; // = Array(60).fill(0);
  isSetSummonPet?: boolean[]; // = Array(60).fill(false);
  materials?: number[]; // = Array(26).fill(0);
  movedDistance?: number[]; // = Array(6).fill(0);
  movedDistancePet?: number; // = 0;
  heroLevel: number[] = Array(6).fill(0);
  heroExp?: number[]; // = Array(6).fill(0);
  abilityPoints: number[] = Array(6).fill(0);
  abilityPointsVitality: number[] = Array(6).fill(0);
  abilityPointsStrength: number[] = Array(6).fill(0);
  abilityPointsIntelligence: number[] = Array(6).fill(0);
  abilityPointsAgility: number[] = Array(6).fill(0);
  abilityPointsLuck: number[] = Array(6).fill(0);
  combatRangeId?: number[]; // = Array(6).fill(0);
  superAbilityPoint: number[] = Array(6).fill(0);
  heroFame: number[] = Array(6).fill(0);
  heroGrade: number[] = Array(6).fill(0);
  superAbilityPointsVitality: number[] = Array(6).fill(0);
  superAbilityPointsStrength: number[] = Array(6).fill(0);
  superAbilityPointsIntelligence: number[] = Array(6).fill(0);
  superAbilityPointsAgility: number[] = Array(6).fill(0);
  superAbilityPointsLuck: number[] = Array(6).fill(0);
  currentAreaLevelsSlime: number[] = Array(20).fill(0);
  currentAreaLevelsMagicSlime: number[] = Array(20).fill(0);
  currentAreaLevelsSpider: number[] = Array(20).fill(0);
  currentAreaLevelsBat: number[] = Array(20).fill(0);
  currentAreaLevelsFairy: number[] = Array(20).fill(0);
  currentAreaLevelsFox: number[] = Array(20).fill(0);
  currentAreaLevelsDevilFish: number[] = Array(20).fill(0);
  currentAreaLevelsTreant: number[] = Array(20).fill(0);
  currentAreaLevelsFlameTiger: number[] = Array(20).fill(0);
  currentAreaLevelsUnicorn: number[] = Array(20).fill(0);
  areaIsReceivedFirstRewardSlime?: boolean[]; // = Array(400).fill(false);
  areaIsReceivedFirstRewardMagicSlime?: boolean[]; // = Array(400).fill(false);
  areaIsReceivedFirstRewardSpider?: boolean[]; // = Array(400).fill(false);
  areaIsReceivedFirstRewardBat?: boolean[]; // = Array(400).fill(false);
  areaIsReceivedFirstRewardFairy?: boolean[]; // = Array(400).fill(false);
  areaIsReceivedFirstRewardFox?: boolean[]; // = Array(400).fill(false);
  areaIsReceivedFirstRewardDevilFish?: boolean[]; // = Array(400).fill(false);
  areaIsReceivedFirstRewardTreant?: boolean[]; // = Array(400).fill(false);
  areaIsReceivedFirstRewardFlameTiger?: boolean[]; // = Array(400).fill(false);
  areaIsReceivedFirstRewardUnicorn?: boolean[]; // = Array(400).fill(false);
  areaCompleteNumsSlime?: number[]; // = Array(400).fill(0);
  areaCompleteNumsMagicSlime?: number[]; // = Array(400).fill(0);
  areaCompleteNumsSpider?: number[]; // = Array(400).fill(0);
  areaCompleteNumsBat?: number[]; // = Array(400).fill(0);
  areaCompleteNumsFairy?: number[]; // = Array(400).fill(0);
  areaCompleteNumsFox?: number[]; // = Array(400).fill(0);
  areaCompleteNumsDevilFish?: number[]; // = Array(400).fill(0);
  areaCompleteNumsTreant?: number[]; // = Array(400).fill(0);
  areaCompleteNumsFlameTiger?: number[]; // = Array(400).fill(0);
  areaCompleteNumsUnicorn?: number[]; // = Array(400).fill(0);
  areaBestTimesSlime?: number[]; // = Array(400).fill(0);
  areaBestTimesMagicSlime?: number[]; // = Array(400).fill(0);
  areaBestTimesSpider?: number[]; // = Array(400).fill(0);
  areaBestTimesBat?: number[]; // = Array(400).fill(0);
  areaBestTimesFairy?: number[]; // = Array(400).fill(0);
  areaBestTimesFox?: number[]; // = Array(400).fill(0);
  areaBestTimesDevilFish?: number[]; // = Array(400).fill(0);
  areaBestTimesTreant?: number[]; // = Array(400).fill(0);
  areaBestTimesFlameTiger?: number[]; // = Array(400).fill(0);
  areaBestTimesUnicorn?: number[]; // = Array(400).fill(0);
  areaBestGoldsSlime?: number[]; // = Array(400).fill(0);
  areaBestGoldsMagicSlime?: number[]; // = Array(400).fill(0);
  areaBestGoldsSpider?: number[]; // = Array(400).fill(0);
  areaBestGoldsBat?: number[]; // = Array(400).fill(0);
  areaBestGoldsFairy?: number[]; // = Array(400).fill(0);
  areaBestGoldsFox?: number[]; // = Array(400).fill(0);
  areaBestGoldsDevilFish?: number[]; // = Array(400).fill(0);
  areaBestGoldsTreant?: number[]; // = Array(400).fill(0);
  areaBestGoldsFlameTiger?: number[]; // = Array(400).fill(0);
  areaBestGoldsUnicorn?: number[]; // = Array(400).fill(0);
  areaBestExpsSlime?: number[]; // = Array(400).fill(0);
  areaBestExpsMagicSlime?: number[]; // = Array(400).fill(0);
  areaBestExpsSpider?: number[]; // = Array(400).fill(0);
  areaBestExpsBat?: number[]; // = Array(400).fill(0);
  areaBestExpsFairy?: number[]; // = Array(400).fill(0);
  areaBestExpsFox?: number[]; // = Array(400).fill(0);
  areaBestExpsDevilFish?: number[]; // = Array(400).fill(0);
  areaBestExpsTreant?: number[]; // = Array(400).fill(0);
  areaBestExpsFlameTiger?: number[]; // = Array(400).fill(0);
  areaBestExpsUnicorn?: number[]; // = Array(400).fill(0);
  areaPrestigePointsSlime?: number[]; // = Array(20).fill(0);
  areaPrestigePointsMagicSlime?: number[]; // = Array(20).fill(0);
  areaPrestigePointsSpider?: number[]; // = Array(20).fill(0);
  areaPrestigePointsBat?: number[]; // = Array(20).fill(0);
  areaPrestigePointsFairy?: number[]; // = Array(20).fill(0);
  areaPrestigePointsFox?: number[]; // = Array(20).fill(0);
  areaPrestigePointsDevilFish?: number[]; // = Array(20).fill(0);
  areaPrestigePointsTreant?: number[]; // = Array(20).fill(0);
  areaPrestigePointsFlameTiger?: number[]; // = Array(20).fill(0);
  areaPrestigePointsUnicorn?: number[]; // = Array(20).fill(0);
  areaPrestigeUpgradeLevelsSlime?: number[]; // = Array(400).fill(0);
  areaPrestigeUpgradeLevelsMagicSlime?: number[]; // = Array(400).fill(0);
  areaPrestigeUpgradeLevelsSpider?: number[]; // = Array(400).fill(0);
  areaPrestigeUpgradeLevelsBat?: number[]; // = Array(400).fill(0);
  areaPrestigeUpgradeLevelsFairy?: number[]; // = Array(400).fill(0);
  areaPrestigeUpgradeLevelsFox?: number[]; // = Array(400).fill(0);
  areaPrestigeUpgradeLevelsDevilFish?: number[]; // = Array(400).fill(0);
  areaPrestigeUpgradeLevelsTreant?: number[]; // = Array(400).fill(0);
  areaPrestigeUpgradeLevelsFlameTiger?: number[]; // = Array(400).fill(0);
  areaPrestigeUpgradeLevelsUnicorn?: number[]; // = Array(400).fill(0);
  areaPrestigeResetNumsSlime?: number[]; // = Array(20).fill(0);
  areaPrestigeResetNumsMagicSlime?: number[]; // = Array(20).fill(0);
  areaPrestigeResetNumsSpider?: number[]; // = Array(20).fill(0);
  areaPrestigeResetNumsBat?: number[]; // = Array(20).fill(0);
  areaPrestigeResetNumsFairy?: number[]; // = Array(20).fill(0);
  areaPrestigeResetNumsFox?: number[]; // = Array(20).fill(0);
  areaPrestigeResetNumsDevilFish?: number[]; // = Array(20).fill(0);
  areaPrestigeResetNumsTreant?: number[]; // = Array(20).fill(0);
  areaPrestigeResetNumsFlameTiger?: number[]; // = Array(20).fill(0);
  areaPrestigeResetNumsUnicorn?: number[]; // = Array(20).fill(0);
  isClearedMission: boolean[] = Array(10000).fill(false);
  isClearedChallenge: boolean[] = Array(Enums.ChallengeKind * 10).fill(false);
  isReceivedRewardsChallenge: boolean[] = Array(Enums.ChallengeKind * 10).fill(false);
  accomplishedFirstTimesChallenge?: number[]; // = Array(108).fill(0);
  accomplishedTimesChallenge?: number[]; // = Array(108).fill(0);
  accomplishedBestTimesChallenge?: number[]; // = Array(108).fill(0);
  superDungeonMaxFloorsReached: number[] = Array(100).fill(0);
  dungeonCoin: number = 0;
  topaz: number = 0;
  ruby: number = 0;
  pieceOfRuby: number = 0;
  motherStone: number = 0;
  entryCostRefreshTicket: number = 0;
  superDungeonPowerupIsUnlocked: boolean[] = Array(21).fill(false);
  superDungeonPowerupPurchasedNums: number[] = Array(21).fill(0);
  superDungeonPowerupRanks: number[] = Array(21).fill(0);

  superDungeonShopPurchasedNums: number[] = Array(200).fill(0);
  superDungeonUpgradeLevels: number[] = Array(61).fill(0);
  superDungeonUpgradeIsSuperQueued: boolean[] = Array(61).fill(false);
  equipmentKinds: number[] = Array(6000).fill(0);
  equipmentOptionNums?: number[]; // = Array(0).fill(0);
  equipmentIsLocked?: number[]; // = Array(0).fill(0);
  dictionaryUpgradePoint?: number; // = 0;
  dictionaryUpgradeLevels: number[] = Array(10).fill(0);
  enchantKinds?: number[]; // = Array(130).fill(0);
  enchantEffectKinds?: number[]; // = Array(130).fill(0);
  enchantEffectLevels?: number[]; // = Array(130).fill(0);
  enchantForgeEffectKinds?: number[]; // = Array(130).fill(0);
  enchantEffectValues?: number[]; // = Array(130).fill(0);
  enchantIsLocked?: boolean[]; // = Array(130).fill(false);
  equipment1stForgeValues: number[] = Array(5300).fill(0);
  equipment2ndForgeValues: number[] = Array(5300).fill(0);
  equipment3rdForgeValues: number[] = Array(5300).fill(0);
  equipment4thForgeValues: number[] = Array(5300).fill(0);
  equipment5thForgeValues: number[] = Array(5300).fill(0);
  equipment6thForgeValues: number[] = Array(5300).fill(0);
  equipment7thForgeValues: number[] = Array(5300).fill(0);
  equipmentLevelsWarrior: number[] = Array(174).fill(0);
  equipmentLevelsWizard: number[] = Array(174).fill(0);
  equipmentLevelsAngel: number[] = Array(174).fill(0);
  equipmentLevelsThief: number[] = Array(174).fill(0);
  equipmentLevelsArcher: number[] = Array(174).fill(0);
  equipmentLevelsTamer: number[] = Array(174).fill(0);
  equipmentProficiencyWarrior?: number[]; // = Array(174).fill(0);
  equipmentProficiencyWizard?: number[]; // = Array(174).fill(0);
  equipmentProficiencyAngel?: number[]; // = Array(174).fill(0);
  equipmentProficiencyThief?: number[]; // = Array(174).fill(0);
  equipmentProficiencyArcher?: number[]; // = Array(174).fill(0);
  equipmentProficiencyTamer?: number[]; // = Array(174).fill(0);
  equipmentIsMaxedWarrior: boolean[] = Array(174).fill(false);
  equipmentIsMaxedWizard: boolean[] = Array(174).fill(false);
  equipmentIsMaxedAngel: boolean[] = Array(174).fill(false);
  equipmentIsMaxedThief: boolean[] = Array(174).fill(false);
  equipmentIsMaxedArcher: boolean[] = Array(174).fill(false);
  equipmentIsMaxedTamer: boolean[] = Array(174).fill(false);
  equipmentIsAutoDisassemble?: boolean[]; // = Array(174).fill(false);
  equipmentIsAutoProficiency?: boolean[]; // = Array(174).fill(false);
  disassembledEquipmentNums?: number[]; // = Array(174).fill(0);
  townMatGainFromdisassemble?: number[]; // = Array(174).fill(0);
  equipment1stOptionEffectKinds: number[] = Array(6000).fill(0);
  equipment2ndOptionEffectKinds: number[] = Array(6000).fill(0);
  equipment3rdOptionEffectKinds: number[] = Array(6000).fill(0);
  equipment4thOptionEffectKinds: number[] = Array(6000).fill(0);
  equipment5thOptionEffectKinds: number[] = Array(6000).fill(0);
  equipment6thOptionEffectKinds: number[] = Array(6000).fill(0);
  equipment7thOptionEffectKinds: number[] = Array(6000).fill(0);
  equipment1stOptionLevels: number[] = Array(6000).fill(0);
  equipment2ndOptionLevels: number[] = Array(6000).fill(0);
  equipment3rdOptionLevels: number[] = Array(6000).fill(0);
  equipment4thOptionLevels: number[] = Array(6000).fill(0);
  equipment5thOptionLevels: number[] = Array(6000).fill(0);
  equipment6thOptionLevels: number[] = Array(6000).fill(0);
  equipment7thOptionLevels: number[] = Array(6000).fill(0);
  equipment1stOptionEffectValues: number[] = Array(6000).fill(0);
  equipment2ndOptionEffectValues: number[] = Array(6000).fill(0);
  equipment3rdOptionEffectValues: number[] = Array(6000).fill(0);
  equipment4thOptionEffectValues: number[] = Array(6000).fill(0);
  equipment5thOptionEffectValues: number[] = Array(6000).fill(0);
  equipment6thOptionEffectValues: number[] = Array(6000).fill(0);
  equipment7thOptionEffectValues: number[] = Array(6000).fill(0);
  equipmentId: number[] = Array(6000).fill(0);
  enchantId?: number[]; // = Array(130).fill(0);
  potionId: number[] = Array(296).fill(0);
  potionKinds: number[] = Array(296).fill(0);
  potionStackNums: number[] = Array(296).fill(0);
  potionIsLocked?: boolean[]; // = Array(296).fill(false);
  potionLevels: number[] = Array(86).fill(0);
  potionProductedNums?: number[]; // = Array(86).fill(0);
  potionDisassembledNums: number[] = Array(86).fill(0);
  guildLevel: number = 0;
  guildExp: number = 0;
  guildAbilityPoint?: number; // = 0;
  guildAbilityLevels: number[] = Array(20).fill(0);
  accomplishedFirstTimesGuildLevel?: number[]; // = Array(501).fill(0);
  accomplishedTimesGuildLevel?: number[]; // = Array(501).fill(0);
  accomplishedBestTimesGuildLevel?: number[]; // = Array(501).fill(0);
  guildGrade: number = 0;
  guildFame: number = 0;
  guildSuperAbilityPoint: number = 0;
  guildSuperAbilityLevels: number[] = Array(13).fill(0);
  alchemyPoint?: number; // = 0;
  mysteriousWater: number = 0;
  mysteriousWaterProgress?: number; // = 0;
  mysteriousWaterExpandedCapNum: number = 0;
  alchemyUpgradeLevels: number[] = Array(10).fill(0);
  catalystLevels: number[] = Array(8).fill(0);
  isEquippedCatarysts: boolean[] = Array(8).fill(false);
  essenceWaterPerSecs: number[] = Array(16).fill(0);
  essenceProgresses?: number[]; // = Array(16).fill(0);
  craftEnchantScrollLevels?: number[]; // = Array(171).fill(0);
  essences?: number[]; // = Array(16).fill(0);
  totalGeneralQuestClearedNum?: number; // = 0;
  totalGeneralQuestClearedNums?: number[]; // = Array(46).fill(0);
  generalQuestClearNumsPerClass?: number[]; // = Array(6).fill(0);
  isClearedQuestGeneralOnce?: boolean[]; // = Array(46).fill(false);
  isPersistentUnlockedQuestGeneral?: boolean[]; // = Array(46).fill(false);
  isClearedQuestsGlobal: boolean[] = Array(79).fill(false);
  isClearedQuestsTitleWarrior: boolean[] = Array(139).fill(false);
  isClearedQuestsTitleWizard: boolean[] = Array(139).fill(false);
  isClearedQuestsTitleAngel: boolean[] = Array(139).fill(false);
  isClearedQuestsTitleThief: boolean[] = Array(139).fill(false);
  isClearedQuestsTitleArcher: boolean[] = Array(139).fill(false);
  isClearedQuestsTitleTamer: boolean[] = Array(139).fill(false);
  isClearedQuestsGeneralWarrior?: boolean[]; // = Array(46).fill(false);
  isClearedQuestsGeneralWizard?: boolean[]; // = Array(46).fill(false);
  isClearedQuestsGeneralAngel?: boolean[]; // = Array(46).fill(false);
  isClearedQuestsGeneralThief?: boolean[]; // = Array(46).fill(false);
  isClearedQuestsGeneralArcher?: boolean[]; // = Array(46).fill(false);
  isClearedQuestsGeneralTamer?: boolean[]; // = Array(46).fill(false);
  isAcceptedQuestsGlobal?: boolean[]; // = Array(79).fill(false);
  isAcceptedQuestsTitleWarrior?: boolean[]; // = Array(139).fill(false);
  isAcceptedQuestsTitleWizard?: boolean[]; // = Array(139).fill(false);
  isAcceptedQuestsTitleAngel?: boolean[]; // = Array(139).fill(false);
  isAcceptedQuestsTitleThief?: boolean[]; // = Array(139).fill(false);
  isAcceptedQuestsTitleArcher?: boolean[]; // = Array(139).fill(false);
  isAcceptedQuestsTitleTamer?: boolean[]; // = Array(139).fill(false);
  isAcceptedQuestsGeneralWarrior?: boolean[]; // = Array(46).fill(false);
  isAcceptedQuestsGeneralWizard?: boolean[]; // = Array(46).fill(false);
  isAcceptedQuestsGeneralAngel?: boolean[]; // = Array(46).fill(false);
  isAcceptedQuestsGeneralThief?: boolean[]; // = Array(46).fill(false);
  isAcceptedQuestsGeneralArcher?: boolean[]; // = Array(46).fill(false);
  isAcceptedQuestsGeneralTamer?: boolean[]; // = Array(46).fill(false);
  initDefeatedNumQuestsGlobal?: number[]; // = Array(79).fill(0);
  initDefeatedNumQuestsTitleWarrior?: number[]; // = Array(139).fill(0);
  initDefeatedNumQuestsTitleWizard?: number[]; // = Array(139).fill(0);
  initDefeatedNumQuestsTitleAngel?: number[]; // = Array(139).fill(0);
  initDefeatedNumQuestsTitleThief?: number[]; // = Array(139).fill(0);
  initDefeatedNumQuestsTitleArcher?: number[]; // = Array(139).fill(0);
  initDefeatedNumQuestsTitleTamer?: number[]; // = Array(139).fill(0);
  initDefeatedNumQuestsGeneralWarrior?: number[]; // = Array(46).fill(0);
  initDefeatedNumQuestsGeneralWizard?: number[]; // = Array(46).fill(0);
  initDefeatedNumQuestsGeneralAngel?: number[]; // = Array(46).fill(0);
  initDefeatedNumQuestsGeneralThief?: number[]; // = Array(46).fill(0);
  initDefeatedNumQuestsGeneralArcher?: number[]; // = Array(46).fill(0);
  initDefeatedNumQuestsGeneralTamer?: number[]; // = Array(46).fill(0);
  initCompletedAreaNumQuestsTitleWarrior?: number[]; // = Array(139).fill(0);
  initCompletedAreaNumQuestsTitleWizard?: number[]; // = Array(139).fill(0);
  initCompletedAreaNumQuestsTitleAngel?: number[]; // = Array(139).fill(0);
  initCompletedAreaNumQuestsTitleThief?: number[]; // = Array(139).fill(0);
  initCompletedAreaNumQuestsTitleArcher?: number[]; // = Array(139).fill(0);
  initCompletedAreaNumQuestsTitleTamer?: number[]; // = Array(139).fill(0);
  initCompletedAreaNumQuestsGeneralWarrior?: number[]; // = Array(46).fill(0);
  initCompletedAreaNumQuestsGeneralWizard?: number[]; // = Array(46).fill(0);
  initCompletedAreaNumQuestsGeneralAngel?: number[]; // = Array(46).fill(0);
  initCompletedAreaNumQuestsGeneralThief?: number[]; // = Array(46).fill(0);
  initCompletedAreaNumQuestsGeneralArcher?: number[]; // = Array(46).fill(0);
  initCompletedAreaNumQuestsGeneralTamer?: number[]; // = Array(46).fill(0);
  initMovedDistanceQuestTitle?: number[]; // = Array(6).fill(0);
  initPhysicalSkillTriggeredNumQuestTitle?: number[]; // = Array(6).fill(0);
  initFireSkillTriggeredNumQuestTitle?: number[]; // = Array(6).fill(0);
  initIceSkillTriggeredNumQuestTitle?: number[]; // = Array(6).fill(0);
  initThunderSkillTriggeredNumQuestTitle?: number[]; // = Array(6).fill(0);
  initLightSkillTriggeredNumQuestTitle?: number[]; // = Array(6).fill(0);
  initDarkSkillTriggeredNumQuestTitle?: number[]; // = Array(6).fill(0);
  survivalNumQuestTitle?: number[]; // = Array(6).fill(0);
  sdMobDefeatedNums: number[] = Array(6).fill(0);
  rebirthMaxHeroLevels?: number[]; // = Array(6).fill(0);
  rebirthNumsWarrior?: number[]; // = Array(10).fill(0);
  rebirthNumsWizard?: number[]; // = Array(10).fill(0);
  rebirthNumsAngel?: number[]; // = Array(10).fill(0);
  rebirthNumsThief?: number[]; // = Array(10).fill(0);
  rebirthNumsArcher?: number[]; // = Array(10).fill(0);
  rebirthNumsTamer?: number[]; // = Array(10).fill(0);
  rebirthPlayTimesWarrior?: number[]; // = Array(10).fill(0);
  rebirthPlayTimesWizard?: number[]; // = Array(10).fill(0);
  rebirthPlayTimesAngel?: number[]; // = Array(10).fill(0);
  rebirthPlayTimesThief?: number[]; // = Array(10).fill(0);
  rebirthPlayTimesArcher?: number[]; // = Array(10).fill(0);
  rebirthPlayTimesTamer?: number[]; // = Array(10).fill(0);
  rebirthMaxHeroLevelsWarrior?: number[]; // = Array(10).fill(0);
  rebirthMaxHeroLevelsWizard?: number[]; // = Array(10).fill(0);
  rebirthMaxHeroLevelsAngel?: number[]; // = Array(10).fill(0);
  rebirthMaxHeroLevelsThief?: number[]; // = Array(10).fill(0);
  rebirthMaxHeroLevelsArcher?: number[]; // = Array(10).fill(0);
  rebirthMaxHeroLevelsTamer?: number[]; // = Array(10).fill(0);
  rebirthPointsWarrior?: number[]; // = Array(10).fill(0);
  rebirthPointsWizard?: number[]; // = Array(10).fill(0);
  rebirthPointsAngel?: number[]; // = Array(10).fill(0);
  rebirthPointsThief?: number[]; // = Array(10).fill(0);
  rebirthPointsArcher?: number[]; // = Array(10).fill(0);
  rebirthPointsTamer?: number[]; // = Array(10).fill(0);
  rebirthUpgradeLevelsWarrior: number[] = Array(53).fill(0);
  rebirthUpgradeLevelsWizard: number[] = Array(53).fill(0);
  rebirthUpgradeLevelsAngel: number[] = Array(53).fill(0);
  rebirthUpgradeLevelsThief: number[] = Array(53).fill(0);
  rebirthUpgradeLevelsArcher: number[] = Array(53).fill(0);
  rebirthUpgradeLevelsTamer: number[] = Array(53).fill(0);
  purchasedNumMaterials?: number[]; // = Array(26).fill(0);
  purchasedNumTraps?: number[]; // = Array(86).fill(0);
  purchasedNumBlessing?: number; // = 0;
  purchasedNumTownMaterials?: number[]; // = Array(15).fill(0);
  shopRestockTimecount?: number; // = 0;
  isAutoBuyBlessings?: boolean[]; // = Array(8).fill(false);
  warriorSkillLevel: number[] = Array(10).fill(0);
  wizardSkillLevel: number[] = Array(10).fill(0);
  angelSkillLevel: number[] = Array(10).fill(0);
  thiefSkillLevel: number[] = Array(10).fill(0);
  archerSkillLevel: number[] = Array(10).fill(0);
  tamerSkillLevel: number[] = Array(10).fill(0);
  warriorMaxReachedSkillLevel: number[] = Array(10).fill(0);
  wizardMaxReachedSkillLevel: number[] = Array(10).fill(0);
  angelMaxReachedSkillLevel: number[] = Array(10).fill(0);
  thiefMaxReachedSkillLevel: number[] = Array(10).fill(0);
  archerMaxReachedSkillLevel: number[] = Array(10).fill(0);
  tamerMaxReachedSkillLevel: number[] = Array(10).fill(0);
  warriorSkillRank: number[] = Array(10).fill(0);
  wizardSkillRank: number[] = Array(10).fill(0);
  angelSkillRank: number[] = Array(10).fill(0);
  thiefSkillRank: number[] = Array(10).fill(0);
  archerSkillRank: number[] = Array(10).fill(0);
  tamerSkillRank: number[] = Array(10).fill(0);
  warriorSkillProficiency?: number[]; // = Array(10).fill(0);
  wizardSkillProficiency?: number[]; // = Array(10).fill(0);
  angelSkillProficiency?: number[]; // = Array(10).fill(0);
  thiefSkillProficiency?: number[]; // = Array(10).fill(0);
  archerSkillProficiency?: number[]; // = Array(10).fill(0);
  tamerSkillProficiency?: number[]; // = Array(10).fill(0);
  currentStanceId: number[] = Array(6).fill(0);
  isEquippedWarriorSkillForWarrior: boolean[] = Array(150).fill(false);
  isEquippedWizardSkillForWarrior: boolean[] = Array(150).fill(false);
  isEquippedAngelSkillForWarrior: boolean[] = Array(150).fill(false);
  isEquippedThiefSkillForWarrior: boolean[] = Array(150).fill(false);
  isEquippedArcherSkillForWarrior: boolean[] = Array(150).fill(false);
  isEquippedTamerSkillForWarrior: boolean[] = Array(150).fill(false);
  isEquippedWarriorSkillForWizard: boolean[] = Array(150).fill(false);
  isEquippedWizardSkillForWizard: boolean[] = Array(150).fill(false);
  isEquippedAngelSkillForWizard: boolean[] = Array(150).fill(false);
  isEquippedThiefSkillForWizard: boolean[] = Array(150).fill(false);
  isEquippedArcherSkillForWizard: boolean[] = Array(150).fill(false);
  isEquippedTamerSkillForWizard: boolean[] = Array(150).fill(false);
  isEquippedWarriorSkillForAngel: boolean[] = Array(150).fill(false);
  isEquippedWizardSkillForAngel: boolean[] = Array(150).fill(false);
  isEquippedAngelSkillForAngel: boolean[] = Array(150).fill(false);
  isEquippedThiefSkillForAngel: boolean[] = Array(150).fill(false);
  isEquippedArcherSkillForAngel: boolean[] = Array(150).fill(false);
  isEquippedTamerSkillForAngel: boolean[] = Array(150).fill(false);
  isEquippedWarriorSkillForThief: boolean[] = Array(150).fill(false);
  isEquippedWizardSkillForThief: boolean[] = Array(150).fill(false);
  isEquippedAngelSkillForThief: boolean[] = Array(150).fill(false);
  isEquippedThiefSkillForThief: boolean[] = Array(150).fill(false);
  isEquippedArcherSkillForThief: boolean[] = Array(150).fill(false);
  isEquippedTamerSkillForThief: boolean[] = Array(150).fill(false);
  isEquippedWarriorSkillForArcher: boolean[] = Array(150).fill(false);
  isEquippedWizardSkillForArcher: boolean[] = Array(150).fill(false);
  isEquippedAngelSkillForArcher: boolean[] = Array(150).fill(false);
  isEquippedThiefSkillForArcher: boolean[] = Array(150).fill(false);
  isEquippedArcherSkillForArcher: boolean[] = Array(150).fill(false);
  isEquippedTamerSkillForArcher: boolean[] = Array(150).fill(false);
  isEquippedWarriorSkillForTamer: boolean[] = Array(150).fill(false);
  isEquippedWizardSkillForTamer: boolean[] = Array(150).fill(false);
  isEquippedAngelSkillForTamer: boolean[] = Array(150).fill(false);
  isEquippedThiefSkillForTamer: boolean[] = Array(150).fill(false);
  isEquippedArcherSkillForTamer: boolean[] = Array(150).fill(false);
  isEquippedTamerSkillForTamer: boolean[] = Array(150).fill(false);
  buildingLevels: number[] = Array(12).fill(0);
  buildingRanks?: number[]; // = Array(12).fill(0);
  buildingResearchLevelsStone: number[] = Array(12).fill(0);
  buildingResearchLevelsCrystal: number[] = Array(12).fill(0);
  buildingResearchLevelsLeaf: number[] = Array(12).fill(0);
  buildingResearchExpsStone?: number[]; // = Array(12).fill(0);
  buildingResearchExpsCrystal?: number[]; // = Array(12).fill(0);
  buildingResearchExpsLeaf?: number[]; // = Array(12).fill(0);
  IsBuildingResearchStone?: boolean[]; // = Array(12).fill(false);
  IsBuildingResearchCrystal?: boolean[]; // = Array(12).fill(false);
  IsBuildingResearchLeaf?: boolean[]; // = Array(12).fill(false);
  accomplishedFirstTimesBuilding?: number[]; // = Array(120).fill(0);
  accomplishedTimesBuilding?: number[]; // = Array(120).fill(0);
  accomplishedBestTimesBuilding?: number[]; // = Array(120).fill(0);
  townMaterials?: number[]; // = Array(15).fill(0);
  upgradeLevelsResource: number[] = Array(20).fill(0);
  upgradeLevelsBasicStats: number[] = Array(7).fill(0);
  upgradeLevelsGoldGain: number = 0;
  upgradeLevelsExpGain: number = 0;
  upgradeLevelsEquipmentInventory: number = 0;
  upgradeLevelsGoldCap: number[] = Array(3).fill(0);
  upgradeLevelsSlimebank: number[] = Array(22).fill(0);
  gold?: number; // = 0;
  slimeCoin?: number; // = 0;
  resources?: number[]; // = Array(3).fill(0);
  playtimes?: number[]; // = Array(6).fill(0);
  playtimesRealTime?: number[]; // = Array(6).fill(0);
  multibuyId?: number; // = 0;
  version?: number; // = 0;
  allTime: number = 0;
  allTimeRealtime?: number; // = 0;
  allTimeWorldAscension?: number; // = 0;
  lastDailyTime?: number; // = 0;
  wasd?: number; // = 0;
  isGotAchievements: boolean[] = Array(441).fill(false);
  isGotAchievementRewards: boolean[] = Array(441).fill(false);
  achievementPlaytimes?: number[]; // = Array(348).fill(0);
  monsterMilk?: number; // = 0;
  monsterPetRanks: number[] = Array(130).fill(0);
  monsterPetLevels: number[] = Array(130).fill(0);
  monsterPetExps?: number[]; // = Array(130).fill(0);
  monsterPetLoyalty: number[] = Array(130).fill(0);
  monsterPetLoyaltyExp?: number[]; // = Array(130).fill(0);
  monsterPetTamingPoints?: number[] = Array(130).fill(0);
  monsterPetIsActives?: boolean[]; // = Array(130).fill(false);
  openedChestNum?: number; // = 0;
  totalMovedDistance?: number[]; // = Array(6).fill(0);
  totalMovedDistancePet?: number; // = 0;
  maxHeroLevelReached?: number[]; // = Array(6).fill(0);
  physicalTriggeredNum?: number[]; // = Array(6).fill(0);
  fireTriggeredNum?: number[]; // = Array(6).fill(0);
  iceTriggeredNum?: number[]; // = Array(6).fill(0);
  thunderTriggeredNum?: number[]; // = Array(6).fill(0);
  lightTriggeredNum?: number[]; // = Array(6).fill(0);
  darkTriggeredNum?: number[]; // = Array(6).fill(0);
  persistentSkillSlotNum: number[] = Array(6).fill(0);
  persistentGlobalSkillSlotNum: number = 0;
  maxHeroGradeReached: number[] = Array(6).fill(0);
  areaIsUnlockedOnceSlime?: boolean[]; // = Array(400).fill(false);
  areaIsUnlockedOnceMagicslime?: boolean[]; // = Array(400).fill(false);
  areaIsUnlockedOnceSpider?: boolean[]; // = Array(400).fill(false);
  areaIsUnlockedOnceBat?: boolean[]; // = Array(400).fill(false);
  areaIsUnlockedOnceFairy?: boolean[]; // = Array(400).fill(false);
  areaIsUnlockedOnceFox?: boolean[]; // = Array(400).fill(false);
  areaIsUnlockedOnceDevilfish?: boolean[]; // = Array(400).fill(false);
  areaIsUnlockedOnceTreant?: boolean[]; // = Array(400).fill(false);
  areaIsUnlockedOnceFlametiger?: boolean[]; // = Array(400).fill(false);
  areaIsUnlockedOnceUnicorn?: boolean[]; // = Array(400).fill(false);
  portalOrbNum?: number; // = 0;
  currentSDRun: number = 0;
  currentSDRunFailed: number = 0;
  totalSDRun: number = 0;
  totalSDRunFailed: number = 0;

  swarmClearedNum?: number; // = 0;
  swarmBestScores?: number[]; // = Array(3).fill(0);
  ascensionNum?: number[]; // = Array(3).fill(0);
  ascensionPlayTime?: number[]; // = Array(3).fill(0);
  ascensionPoints?: number[]; // = Array(3).fill(0);
  bestAscensionPlayTime?: number[]; // = Array(3).fill(0);
  accomplishedFirstTimeAscension?: number[]; // = Array(3).fill(0);
  accomplishedTimeAscension?: number[]; // = Array(3).fill(0);
  accomplishedBestTimeAscension?: number[]; // = Array(3).fill(0);
  ascensionMilestoneLevelReached: number[] = Array(8).fill(0);
  isGotRewardWAAccomplishments?: boolean[]; // = Array(200).fill(false);
  worldAscensionUpgradeLevels: number[] = Array(10).fill(0);
  sdGemLevels: number[] = Array(15).fill(0);
  sdGemExps: number[] = Array(15).fill(0);
  sdGemMotherStoneAssigned: number[] = Array(15).fill(0);
  modifierLoadoutId: number[] = Array(200).fill(0);
  isActiveSdModifiers: boolean[] = Array(4000).fill(false);
  maxModifierCleareds: number[] = Array(200).fill(0);
  sdModifierValues: number[] = Array(4000).fill(0);
  totalDungeonCoinGained: number = 0;
  totalPermanentDungeonCoinGained: number = 0;
  totalTopazGained: number = 0;
  totalRubyGained: number = 0;
  totalPieceOfRubyGained: number = 0;
  totalMotherStoneGained: number = 0;
  totalEntryCostRefreshTicketGained: number = 0;
  totalEntryCostRefreshTicketUsed: number = 0;
  totalDodgeNum: number = 0;
  regularChestRNG?: number[]; // = Array(300).fill(0);
  regularChestRNGUsedIdNum?: number; // = 0;
  isReceivedRegularChestToday: boolean = false;
  epicCoin?: number; // = 0;
  epicCoinConsumed?: number; // = 0;
  epicStorePurchasedNum: number[] = Array(75).fill(0);
  inAppPurchasedNum: number[] = Array(10).fill(0);
  inAppPurchasedNum_ver01020101: number[] = Array(10).fill(0);
  totalEquipmentGained?: number; // = 0;
  pieceOfRubyGainFromDisassemble: number = 0;
  equipmentIsGotOnce?: boolean[]; // = Array(174).fill(false);
  equipmentLoadoutIds: number[] = Array(6).fill(0);
  potionQueues?: number[]; // = Array(86).fill(0);
  potionIsSuperQueues?: boolean[]; // = Array(86).fill(false);
  isDisassembleTalismans?: boolean[]; // = Array(86).fill(false);
  isStartedExpedition?: boolean[]; // = Array(20).fill(false);
  expeditionProgress?: number[]; // = Array(20).fill(0);
  expeditionTimeId: number[] = Array(20).fill(0);
  expeditionMovedDistance?: number[]; // = Array(20).fill(0);
  expeditionPetSpecies: number[] = Array(100).fill(0);
  expeditionPetColors: number[] = Array(100).fill(0);
  expeditionPetIsSet: boolean[] = Array(100).fill(false);
  expeditionKinds: number[] = Array(100).fill(0);
  expeditionLevels: number[] = Array(7).fill(0);
  expeditionExps: number[] = Array(7).fill(0);
  expeditionCompletedNums?: number[]; // = Array(7).fill(0);
  expeditionTimes?: number[]; // = Array(7).fill(0);
  maxGuildLevel: number = 0;
  maxGuildGrade: number = 0;
  autoTargetGuildAbilityLevels: number[] = Array(20).fill(0);
  talismanFragement?: number; // = 0;
  totalAlchemyPointGained?: number; // = 0;
  isOnAMWA?: boolean; // = false;
  amwaIsEquippedCatalysts?: boolean[]; // = Array(8).fill(false);
  amwaSavedEssenceWaterPerSecs?: number[]; // = Array(16).fill(0);
  dailyQuestRarities?: number[]; // = Array(9).fill(0);
  dailyQuestMonsterSpecies?: number[]; // = Array(9).fill(0);
  dailyQuestAreaKind?: number[]; // = Array(9).fill(0);
  dailyQuestAreaId?: number[]; // = Array(9).fill(0);
  isClearedQuestsDaily?: boolean[]; // = Array(9).fill(false);
  isAcceptedQuestsDaily?: boolean[]; // = Array(9).fill(false);
  initDefeatedNumQuestsDaily?: number[]; // = Array(9).fill(0);
  initCompletedAreaNumQuestsDaily?: number[]; // = Array(9).fill(0);
  maxReachedGeneralQuestClearedNums?: number[]; // = Array(46).fill(0);
  isFavoriteQuestWarrior?: boolean[]; // = Array(46).fill(false);
  isFavoriteQuestWizard?: boolean[]; // = Array(46).fill(false);
  isFavoriteQuestAngel?: boolean[]; // = Array(46).fill(false);
  isFavoriteQuestThief?: boolean[]; // = Array(46).fill(false);
  isFavoriteQuestArcher?: boolean[]; // = Array(46).fill(false);
  isFavoriteQuestTamer?: boolean[]; // = Array(46).fill(false);
  questingAreaKinds?: number[]; // = Array(46).fill(0);
  questingAreaIds?: number[]; // = Array(46).fill(0);
  questingAreaIsDungeon?: boolean[]; // = Array(46).fill(false);
  isGotFirstEQ?: boolean; // = false;
  totalRebirthNums: number[] = Array(100).fill(0);
  bestRebirthPlaytimes?: number[]; // = Array(100).fill(0);
  isAutoRebirthOns?: boolean[]; // = Array(6).fill(false);
  autoRebirthLevels?: number[]; // = Array(100).fill(0);
  autoRebirthPoints?: number[]; // = Array(100).fill(0);
  autoRebirthTiers?: number[]; // = Array(6).fill(0);
  favoriteAreaKinds?: number[]; // = Array(6).fill(0);
  favoriteAreaIds?: number[]; // = Array(6).fill(0);
  isBestExpSecAreas?: boolean[]; // = Array(6).fill(false);
  isLazyQuestingMode?: boolean[]; // = Array(6).fill(false);
  isAutoAbilityPointPresets?: boolean[]; // = Array(6).fill(false);
  autoAbilityPointPresetsVIT?: number[]; // = Array(6).fill(0);
  autoAbilityPointPresetsSTR?: number[]; // = Array(6).fill(0);
  autoAbilityPointPresetsINT?: number[]; // = Array(6).fill(0);
  autoAbilityPointPresetsAGI?: number[]; // = Array(6).fill(0);
  autoAbilityPointPresetsLUK?: number[]; // = Array(6).fill(0);
  autoAbilityPointMaxVIT?: number[]; // = Array(6).fill(0);
  autoAbilityPointMaxSTR?: number[]; // = Array(6).fill(0);
  autoAbilityPointMaxINT?: number[]; // = Array(6).fill(0);
  autoAbilityPointMaxAGI?: number[]; // = Array(6).fill(0);
  autoAbilityPointMaxLUK?: number[]; // = Array(6).fill(0);
  accomplishedFirstTimesRebirth?: number[]; // = Array(100).fill(0);
  accomplishedTimesRebirth?: number[]; // = Array(100).fill(0);
  accomplishedBestTimesRebirth?: number[]; // = Array(100).fill(0);
  warriorSkillTriggeredNum: number[] = Array(10).fill(0);
  wizardSkillTriggeredNum: number[] = Array(10).fill(0);
  angelSkillTriggeredNum: number[] = Array(10).fill(0);
  thiefSkillTriggeredNum: number[] = Array(10).fill(0);
  archerSkillTriggeredNum: number[] = Array(10).fill(0);
  tamerSkillTriggeredNum: number[] = Array(10).fill(0);
  skillLoadoutIds: number[] = Array(6).fill(0);
  maxBuildingLevelsReached: number[] = Array(12).fill(0);
  maxBuildingRanksReached: number[] = Array(12).fill(0);
  upgradeQueuesResource?: number[]; // = Array(20).fill(0);
  upgradeQueuesBasicStats?: number[]; // = Array(7).fill(0);
  upgradeQueuesGoldGain?: number; // = 0;
  upgradeQueueExpGain?: number; // = 0;
  upgradeQueuesEquipmentInventory?: number; // = 0;
  upgradeQueuesGoldCap?: number[]; // = Array(3).fill(0);
  upgradeQueuesSlimebank?: number[]; // = Array(22).fill(0);
  upgradeIsSuperQueuesResource?: boolean[]; // = Array(20).fill(false);
  upgradeIsSuperQueuesBasicStats?: boolean[]; // = Array(7).fill(false);
  upgradeIsSuperQueuesGoldGain?: boolean; // = false;
  upgradeIsSuperQueueExpGain?: boolean; // = false;
  upgradeIsSuperQueueEquipmentInventory?: boolean; // = false;
  upgradeIsSuperQueuesGoldCap?: boolean[]; // = Array(3).fill(false);
  upgradeIsSuperQueuesSlimebank?: boolean[]; // = Array(22).fill(false);
  nitro?: number; // = 0;
  nitroConsumed?: number; // = 0;
  nitroSpeed: number = 0;
  totalGold?: number; // = 0;
  totalStone?: number; // = 0;
  totalCrystal?: number; // = 0;
  totalLeaf?: number; // = 0;
  totalSlimeCoin?: number; // = 0;
  isDlcStarterPack?: boolean; // = false;
  isDlcNitroPack?: boolean; // = false;
  isDlcGlobalSkillSlotPack?: boolean; // = false;
  isDlcInventorySlotPack?: boolean; // = false;
  currentHero: number = 0;
  isAlphaSave: boolean = false;
  multibuyNums?: number[]; // = Array(15).fill(0);
  isShowQuickAccess?: boolean; // = false;
  autoAreaProgressionTargetClearNums?: number[]; // = Array(100).fill(0);
  isReceivedBonusCodes?: boolean[]; // = Array(28).fill(false);
  isEnchantFilter?: boolean[]; // = Array(171).fill(false);
  enchantFilterLevel?: number[]; // = Array(171).fill(0);
  isSlotNumEnchantFilter?: boolean; // = false;
  slotNumEnchantFilter?: number; // = 0;
  checkedIEH1Achievement?: number; // = 0;
  receivedIEH1Achievement?: number; // = 0;
  isReceivedIEH1DLCIEH2SupportPack: boolean = false;
  isScrollFilter?: boolean[]; // = Array(34).fill(false);
  isPowerupFilter: boolean[] = Array(160).fill(false);
  powerupFilterPurchaseLimit: number[] = Array(160).fill(0);
  powerupFilterLoadoutId: number[] = Array(6).fill(0);
  SDAutoLeaveAndRetryTargetFloor: number = 0;
  SDAutoLeaveAndRetryTargetEntryCost: number = 0;
  SDAutoProgressionTargetFloor: number = 0;
  SDAutoUseRefreshTicketTargetEntryCost: number = 0;
  SDAutoBuyPurchaseNum: number = 0;
  currentTutorialArrow?: number; // = 0;
  equipmentOptionNums1?: number[]; // = Array(1000).fill(0);
  equipmentOptionNums2?: number[]; // = Array(1000).fill(0);
  equipmentOptionNums3?: number[]; // = Array(1000).fill(0);
  equipmentOptionNums4?: number[]; // = Array(1000).fill(0);
  equipmentOptionNums5?: number[]; // = Array(1000).fill(0);
  equipmentOptionNums6?: number[]; // = Array(1000).fill(0);
  equipmentIsLocked1?: boolean[]; // = Array(1000).fill(false);
  equipmentIsLocked2?: boolean[]; // = Array(1000).fill(false);
  equipmentIsLocked3?: boolean[]; // = Array(1000).fill(false);
  equipmentIsLocked4?: boolean[]; // = Array(1000).fill(false);
  equipmentIsLocked5?: boolean[]; // = Array(1000).fill(false);
  equipmentIsLocked6?: boolean[]; // = Array(1000).fill(false);
  globalSkillOrdersWarrior0: number[];
  globalSkillOrdersWarrior1: number[];
  globalSkillOrdersWarrior2: number[];
  globalSkillOrdersWarrior3: number[];
  globalSkillOrdersWarrior4: number[];
  globalSkillOrdersWizard0: number[];
  globalSkillOrdersWizard1: number[];
  globalSkillOrdersWizard2: number[];
  globalSkillOrdersWizard3: number[];
  globalSkillOrdersWizard4: number[];
  globalSkillOrdersAngel0: number[];
  globalSkillOrdersAngel1: number[];
  globalSkillOrdersAngel2: number[];
  globalSkillOrdersAngel3: number[];
  globalSkillOrdersAngel4: number[];
  globalSkillOrdersThief0: number[];
  globalSkillOrdersThief1: number[];
  globalSkillOrdersThief2: number[];
  globalSkillOrdersThief3: number[];
  globalSkillOrdersThief4: number[];
  globalSkillOrdersArcher0: number[];
  globalSkillOrdersArcher1: number[];
  globalSkillOrdersArcher2: number[];
  globalSkillOrdersArcher3: number[];
  globalSkillOrdersArcher4: number[];
  globalSkillOrdersTamer0: number[];
  globalSkillOrdersTamer1: number[];
  globalSkillOrdersTamer2: number[];
  globalSkillOrdersTamer3: number[];
  globalSkillOrdersTamer4: number[];
  classSkillOrdersWarrior0: number[];
  classSkillOrdersWarrior1: number[];
  classSkillOrdersWarrior2: number[];
  classSkillOrdersWarrior3: number[];
  classSkillOrdersWarrior4: number[];
  classSkillOrdersWizard0: number[];
  classSkillOrdersWizard1: number[];
  classSkillOrdersWizard2: number[];
  classSkillOrdersWizard3: number[];
  classSkillOrdersWizard4: number[];
  classSkillOrdersAngel0: number[];
  classSkillOrdersAngel1: number[];
  classSkillOrdersAngel2: number[];
  classSkillOrdersAngel3: number[];
  classSkillOrdersAngel4: number[];
  classSkillOrdersThief0: number[];
  classSkillOrdersThief1: number[];
  classSkillOrdersThief2: number[];
  classSkillOrdersThief3: number[];
  classSkillOrdersThief4: number[];
  classSkillOrdersArcher0: number[];
  classSkillOrdersArcher1: number[];
  classSkillOrdersArcher2: number[];
  classSkillOrdersArcher3: number[];
  classSkillOrdersArcher4: number[];
  classSkillOrdersTamer0: number[];
  classSkillOrdersTamer1: number[];
  classSkillOrdersTamer2: number[];
  classSkillOrdersTamer3: number[];
  classSkillOrdersTamer4: number[];
}
